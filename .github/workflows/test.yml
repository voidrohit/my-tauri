name: 'Publish Release'

# This will trigger the action on each push to the `release` branch.
on:
  push:
    branches:
      - release

# We do 3 jobs sequentially,
# 1. Draft a release on CrabNebula Cloud
# 2. (In parallel) Build and upload assets for each OS to the new release
# 3. Publish the release
# You can adjust parameters for each job to suit your needs,
# you can also only create drafts and have publish be a manual step.
jobs:
  # Step 1: Draft a release on CrabNebula Cloud
  draft:
    name: Draft Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Draft Release (CrabNebula Cloud)
        uses: crabnebula-dev/cloud-release@dev
        id: draft
        with:
          command: release draft ${{ secrets.CN_APP_ID }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  # Step 2: Build and upload assets for each OS to the new release
  build-and-upload:
    name: Build and Upload Assets
    needs: draft
    permissions:
      contents: write
    strategy:
      fail-fast: false
      # This will create a job for each platform in the matrix
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: Swatinem/rust-cache@v2

      - name: Install Dependencies (Ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Front-end Dependencies
        run: npm install

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build Tauri App
        run: npm run tauri build -- -vv --target ${{ matrix.target }}

      - name: Upload Build Artifacts (CrabNebula Cloud)
        uses: crabnebula-dev/cloud-release@dev
        id: upload
        with:
          command: release upload ${{ secrets.CN_APP_ID }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  # Step 3: Publish the release
  publish:
    name: Publish Release to CrabNebula Cloud
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crabnebula-dev/cloud-release@dev
        id: publish
        with:
          command: release publish ${{ secrets.CN_APP_ID }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
